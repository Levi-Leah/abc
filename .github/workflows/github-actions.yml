
name: Build the Infrastructure
on:
  push:
    branches:
    - main

jobs:
  azure-setup:
    runs-on: ubuntu-latest

    steps:


  build-deploy:
    runs-on: ubuntu-latest

    env:
      # ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      # ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      # ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      # ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      APP_NAME: "poc-abc"
      TF_DIR: "./terraform-config"
      HELM_DIR: "./helm-config"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Azure CLI
      uses: azure/login@v2
      with:
        creds: ${{  secrets.AZURE_CREDENTIALS  }}

    - name: Get Backend Values
      run: |
        STORAGE_RESOURCE_GROUP_NAME=$(sed -n '/backend "azurerm" {/,/}/p' main.tf | awk -F= '/resource_group_name/{gsub(/[ "]/, "", $2); print $2}')
        STORAGE_ACCOUNT_NAME=$(sed -n '/backend "azurerm" {/,/}/p' main.tf | awk -F= '/storage_account_name/{gsub(/[ "]/, "", $2); print $2}')
        STORAGE_CONTAINER_NAME=$(sed -n '/backend "azurerm" {/,/}/p' main.tf | awk -F= '/container_name/{gsub(/[ "]/, "", $2); print $2}')
        STORAGE_LOCATION=$(sed -n '/variable "location" {/,/}/p' variables.tf | awk -F= '/default/{gsub(/[ "]/, "", $2); print $2}')

        echo "STORAGE_RESOURCE_GROUP_NAME=$STORAGE_RESOURCE_GROUP_NAME" >> $GITHUB_ENV
        echo "STORAGE_ACCOUNT_NAME=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
        echo "STORAGE_CONTAINER_NAME=$STORAGE_CONTAINER_NAME" >> $GITHUB_ENV
        echo "STORAGE_LOCATION=$STORAGE_LOCATION" >> $GITHUB_ENV

      working-directory: ${{  env.TF_DIR }}

    - name: Check if Storage Account Exists
      run: |

        if [ $(az group exists --resource-group ${{ env.STORAGE_RESOURCE_GROUP_NAME }}) = false ]; then
          echo "${{ env.STORAGE_RESOURCE_GROUP_NAME }} does not exist. Creating..."

          az group create --name "${{ env.STORAGE_RESOURCE_GROUP_NAME }}" --location "${{ env.STORAGE_LOCATION }}"
          az storage account create --name "${{ env.STORAGE_ACCOUNT_NAME }}" --resource-group ${{ env.STORAGE_RESOURCE_GROUP_NAME }} --location "${{ env.STORAGE_LOCATION }}" --sku Standard_LRS
          az storage container create --name ${{ env.STORAGE_CONTAINER_NAME }} --account-name ${{ env.STORAGE_ACCOUNT_NAME }}
        else
            echo "${{ env.STORAGE_RESOURCE_GROUP_NAME }} exists. Skipping creation..."
        fi

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 'latest'
        terraform_wrapper: false

    - name: Deploy Terraform
      run: |
        terraform init
        terraform plan
        terraform apply -auto-approve
      working-directory: ${{  env.TF_DIR }}

    - name: Get Terraform Output
      run: |
        echo "RESOURCE_GROUP_NAME=$(terraform output resource_group_name | sed 's/"//g')" >> $GITHUB_ENV
        echo "AKS_CLUSTER_NAME=$(terraform output aks_cluster_name | sed 's/"//g')" >> $GITHUB_ENV
      working-directory: ${{  env.TF_DIR }}

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: latest

    - name: Deploy Helm
      run: |
        chmod 600 ${{  env.TF_DIR }}/kubeconfig
        helm upgrade --install $APP_NAME ${{ env.HELM_DIR }} --kubeconfig ${{  env.TF_DIR }}/kubeconfig

    - name: Get External IP
      run: |
        az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name ${{ env.AKS_CLUSTER_NAME  }}

        kubectl wait --for=condition=ready service my-app-service --timeout=150s

        EXTERNAL_IP=$(kubectl get service $APP_NAME --output jsonpath="{.status.loadBalancer.ingress[0].ip}")
        echo "::add-mask::$EXTERNAL_IP" >> $GITHUB_ENV

        if [ -n "$EXTERNAL_IP" ]; then
          echo "EXTERNAL_IP=$EXTERNAL_IP" >> $GITHUB_ENV
        else
          echo "Failed to retrieve External IP."
          exit 1
        fi

    - name: Check if App is Running
      run: |
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$EXTERNAL_IP)

        if [ "$STATUS" -ne 200 ]; then
            echo "App is not running. Status code: $STATUS"
            exit 1
        fi
            echo "App is running. Status code: $STATUS"
