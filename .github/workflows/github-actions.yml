
name: Build the Infrastructure
on:
  push:
    branches:
    - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    env: # Declare environment variables once for the entire job
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      STORAGE_RESOURCE_GROUP: "XYZStorageResourceGroup"
      STORAGE_ACCOUNT: "xyzstorageaccountunique4"
      STORAGE_CONTAINER: "xyztoragecontainer"
      STATE_FILE: "terraform.tfstate"
      STORAGE_LOCATION: "Japan West"
      APP_NAME: ${{ github.event.repository.name }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Check if Docker image exists
      run: |
        IMAGE="${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest"

        if docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
          echo "Docker image already exists."
          echo "docker_image_exists=true" >> $GITHUB_ENV
        else
          echo "Docker image does not exist."
          echo "docker_image_exists=false" >> $GITHUB_ENV
        fi

    - name: Build and push Docker image
      if: ${{ env.docker_image_exists == 'false' }}
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest

    - name: Set up Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 'latest'

    - name: Check if State File Exists
      id: check_account
      run: |

        tf_state=$(az storage blob exists --container-name $STORAGE_CONTAINER --name $STATE_FILE --account-name $STORAGE_ACCOUNT --query "exists")

        if [[ "$tf_state" == "false" ]]; then
          echo "State file does not exist."
          echo "storage_exists=false" >> $GITHUB_ENV
        else
          echo "State file exists."
          echo "storage_exists=true" >> $GITHUB_ENV
        fi

    - name: Create resource group, account, and container for state storage
      if: ${{ env.storage_exists == 'false' }}
      run: |
        az group create --name $STORAGE_RESOURCE_GROUP --location $STORAGE_LOCATION
        az storage account create --name $STORAGE_ACCOUNT --resource-group $STORAGE_RESOURCE_GROUP --location $STORAGE_LOCATION --sku Standard_LRS
        az storage container create --name $STORAGE_CONTAINER --account-name $STORAGE_ACCOUNT

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform-config

    - name: Terraform Plan
      run: terraform plan
      working-directory: ./terraform-config

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./terraform-config

    - name: Helm
      uses: azure/setup-helm@v4
      with:
        version: latest

    - name: Deploy Helm
      run: |

        helm upgrade --install $APP_NAME ./helm-config --set Image.Repository=${{ secrets.DOCKER_USERNAME }} --kubeconfig ./terraform-config/kubeconfig

    # - name: Verify Application
    #   run: |
    #     kubectl get services
    #     kubectl get pods
