name: CI/CD for Node.js App on AKS
on:
  push:
    branches:
    - main # Run CI/CD when code is merged into the main branch

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    env: # Declare environment variables once for the entire job
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js (latest)
      uses: actions/setup-node@v4
      with:
        node-version: 'latest'

    - name: Install npm
      run: npm install
      working-directory: ./app

    - name: Install kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'

    - name: Set up Terraform (latest)
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 'latest'

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform-config

    # Retrieve Terraform outputs for resource names
    - name: Get Terraform Output
      id: get_output
      run: |
        echo "RESOURCE_GROUP=$(terraform output -raw resource_group_name)" >> $GITHUB_ENV
        echo "VNET_NAME=$(terraform output -raw vnet_name)" >> $GITHUB_ENV
        echo "SUBNET_NAME=$(terraform output -raw subnet_name)" >> $GITHUB_ENV
        echo "AKS_CLUSTER_NAME=$(terraform output -raw aks_cluster_name)" >> $GITHUB_ENV
      working-directory: ./terraform-config

    # Check if the resources exist in Azure, based on Terraform outputs
    - name: Check for Existing Resources
      id: check_resources
      run: |
        rg_exists=$(az group show --name "$RESOURCE_GROUP" --query name --output tsv || echo "null")
        vnet_exists=$(az network vnet show --name "$VNET_NAME" --resource-group "$RESOURCE_GROUP" --query name --output tsv || echo "null")
        subnet_exists=$(az network vnet subnet show --name "$SUBNET_NAME" --vnet-name "$VNET_NAME" --resource-group "$RESOURCE_GROUP" --query name --output tsv || echo "null")
        aks_exists=$(az aks show --name "$AKS_CLUSTER_NAME" --resource-group "$RESOURCE_GROUP" --query name --output tsv || echo "null")

        echo "RG_EXISTS=$rg_exists" >> $GITHUB_ENV
        echo "VNET_EXISTS=$vnet_exists" >> $GITHUB_ENV
        echo "SUBNET_EXISTS=$subnet_exists" >> $GITHUB_ENV
        echo "AKS_EXISTS=$aks_exists" >> $GITHUB_ENV
      shell: bash

    # Import resources if they exist
    - name: Import Resources if They Exist
      run: |
        if [ "$RG_EXISTS" != "null" ]; then
          echo "Importing existing resource group into Terraform."
          terraform import azurerm_resource_group.aks_rg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/$RESOURCE_GROUP
        fi

        if [ "$VNET_EXISTS" != "null" ]; then
          echo "Importing existing virtual network into Terraform."
          terraform import azurerm_virtual_network.aks_vnet /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/virtualNetworks/$VNET_NAME
        fi

        if [ "$SUBNET_EXISTS" != "null" ]; then
          echo "Importing existing subnet into Terraform."
          terraform import azurerm_subnet.aks_subnet /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/virtualNetworks/$VNET_NAME/subnets/$SUBNET_NAME
        fi

        if [ "$AKS_EXISTS" != "null" ]; then
          echo "Importing existing AKS cluster into Terraform."
          terraform import azurerm_kubernetes_cluster.aks_cluster /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.ContainerService/managedClusters/$AKS_CLUSTER_NAME
        fi
      working-directory: ./terraform-config

    - name: Terraform Plan
      run: terraform plan
      working-directory: ./terraform-config

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./terraform-config

    - name: Install Helm
      uses: azure/setup-helm@v4.2.0
      with:
        version: 'latest'

    - name: Get AKS Credentials
      run: |
        az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_CLUSTER_NAME

    - name: Deploy using Helm
      run: |
        helm upgrade --install myapp ./helm-config
        kubectl get pods --namespace default

    - name: Verify Application
      run: |
        kubectl get services
        kubectl get pods
