
name: Build the Infrastructure
on:
  push:
    branches:
    - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    # Declare environment variables once for the entire job
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Azure CLI
      uses: azure/login@v2
      with:
        creds: ${{  secrets.AZURE_CREDENTIALS  }}

    - name: Get Backend Values
      run: |
        STORAGE_RESOURCE_GROUP_NAME=$(sed -n '/backend "azurerm" {/,/}/p' main.tf | awk -F= '/resource_group_name/{gsub(/[ "]/, "", $2); print $2}')
        STORAGE_ACCOUNT_NAME=$(sed -n '/backend "azurerm" {/,/}/p' main.tf | awk -F= '/storage_account_name/{gsub(/[ "]/, "", $2); print $2}')
        STORAGE_CONTAINER_NAME=$(sed -n '/backend "azurerm" {/,/}/p' main.tf | awk -F= '/container_name/{gsub(/[ "]/, "", $2); print $2}')
        STORAGE_LOCATION=$(sed -n '/variable "location" {/,/}/p' variables.tf | awk -F= '/default/{gsub(/[ "]/, "", $2); print $2}')

        echo "STORAGE_RESOURCE_GROUP_NAME=$STORAGE_RESOURCE_GROUP_NAME" >> $GITHUB_ENV
        echo "STORAGE_ACCOUNT_NAME=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
        echo "STORAGE_CONTAINER_NAME=$STORAGE_CONTAINER_NAME" >> $GITHUB_ENV
        echo "STORAGE_LOCATION=$STORAGE_LOCATION" >> $GITHUB_ENV

      working-directory: ./terraform-config

    - name: Check if Storage Account Exists
      run: |

        if [ $(az group exists --resource-group ${{ env.STORAGE_RESOURCE_GROUP_NAME }}) = false ]; then
          echo "${{ env.STORAGE_RESOURCE_GROUP_NAME }} does not exist. Creating..."

          az group create --name "${{ env.STORAGE_RESOURCE_GROUP_NAME }}" --location "${{ env.STORAGE_LOCATION }}"
          az storage account create --name "${{ env.STORAGE_ACCOUNT_NAME }}" --resource-group ${{ env.STORAGE_RESOURCE_GROUP_NAME }} --location "${{ env.STORAGE_LOCATION }}" --sku Standard_LRS
          az storage container create --name ${{ env.STORAGE_CONTAINER_NAME }} --account-name ${{ env.STORAGE_ACCOUNT_NAME }}
        else
            echo "${{ env.STORAGE_RESOURCE_GROUP_NAME }} exists. Skipping creation..."
        fi

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 'latest'
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform-config

    - name: Terraform Plan
      run: terraform plan
      working-directory: ./terraform-config

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./terraform-config

    - name: Get Terraform Output
      run: |
        echo "RESOURCE_GROUP_NAME=$(terraform output resource_group_name | sed 's/"//g')" >> $GITHUB_ENV
        echo "AKS_CLUSTER_NAME=$(terraform output aks_cluster_name | sed 's/"//g')" >> $GITHUB_ENV
      working-directory: ./terraform-config

    - name: Helm
      uses: azure/setup-helm@v4
      with:
        version: latest

    - name: Deploy Helm
      run: |
        chmod 600 ./terraform-config/kubeconfig
        helm upgrade --install poc-abc ./helm-config --kubeconfig ./terraform-config/kubeconfig

    - name: Get External IP
      run: |
        az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name ${{ env.AKS_CLUSTER_NAME  }}

        kubectl get services --output jsonpath="{.items[*].status.loadBalancer.ingress[*].ip}"
        echo "EXTERNAL_IP=$(kubectl get services --output jsonpath="{.items[*].status.loadBalancer.ingress[*].ip}")" >> $GITHUB_ENV

    - name: Check if App is Running
      run: |
        curl -f http://${{ env.EXTERNAL_IP }}/ || exit 1
