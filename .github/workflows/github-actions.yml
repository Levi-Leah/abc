name: CI/CD for Node.js App on AKS
on:
  push:
    branches:
    - main # Run CI/CD when code is merged into the main branch

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    env: # Declare environment variables once for the entire job
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js (latest)
      uses: actions/setup-node@v4
      with:
        node-version: 'latest'

    - name: Install npm
      run: npm install
      working-directory: ./app

    - name: Install kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'latest'

    - name: Set up Terraform (latest)
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 'latest'

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform-config

    # Run Terraform plan and check if any changes are needed
    - name: Terraform Plan
      id: plan
      run: terraform plan -out=tfplan -no-color
      working-directory: ./terraform-config

    # Conditionally apply changes only if Terraform plan detects changes
    - name: Terraform Apply
      if: steps.plan.outputs.has_changes == 'true'
      run: terraform apply -auto-approve tfplan
      working-directory: ./terraform-config

    # Check if there are any changes in the Terraform plan
    - name: Check if Plan has Changes
      id: check_changes
      run: |
        if grep -q 'No changes. Infrastructure is up-to-date.' tfplan; then
          echo "has_changes=false" >> $GITHUB_ENV
        else
          echo "has_changes=true" >> $GITHUB_ENV
      working-directory: ./terraform-config

    - name: Get AKS Credentials
      run: az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }}

    - name: Install Helm
      uses: azure/setup-helm@v4.2.0
      with:
        version: 'latest'

    - name: Get AKS Credentials
      run: az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

    - name: Deploy using Helm
      run: |
        helm upgrade --install myapp ./helm-config
        kubectl get pods --namespace default

    - name: Verify Application
      run: |
        kubectl get services
        kubectl get pods
